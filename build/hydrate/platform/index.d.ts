import * as d from '../../declarations';
export declare const cmpModules: Map<string, {
    [exportName: string]: d.ComponentConstructor;
}>;
export declare const loadModule: (cmpMeta: d.ComponentRuntimeMeta, _hostRef: d.HostRef, _hmrVersionId?: string) => any;
export declare const isMemberInElement: (elm: any, memberName: string) => boolean;
export declare const registerComponents: (Cstrs: d.ComponentNativeConstructor[]) => void;
export declare const win: Window & typeof globalThis;
export declare const doc: Document;
export declare const readTask: (cb: Function) => void;
export declare const writeTask: (cb: Function) => void;
export declare const nextTick: (cb: () => void) => Promise<void>;
export declare const consoleError: (e: any) => void;
export declare const consoleDevError: (..._: any[]) => void;
export declare const consoleDevWarn: (..._: any[]) => void;
export declare const consoleDevInfo: (..._: any[]) => void;
export declare const Context: {};
export declare const plt: d.PlatformRuntime;
export declare const supportsShadow = false;
export declare const supportsListenerOptions = false;
export declare const supportsConstructibleStylesheets = false;
export declare const getHostRef: (ref: d.RuntimeRef) => d.HostRef;
export declare const registerInstance: (lazyInstance: any, hostRef: d.HostRef) => WeakMap<d.RuntimeRef, d.HostRef>;
export declare const registerHost: (elm: d.HostElement, cmpMeta: d.ComponentRuntimeMeta) => WeakMap<d.RuntimeRef, d.HostRef>;
export declare const Build: d.UserBuildConditionals;
export declare const styles: d.StyleMap;
export declare const modeResolutionChain: d.ResolutionHandler[];
export { BUILD, NAMESPACE } from '@app-data';
export { hydrateApp } from './hydrate-app';
export * from '@runtime';
