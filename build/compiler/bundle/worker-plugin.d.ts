import * as d from '../../declarations';
import { Plugin } from 'rollup';
export declare const workerPlugin: (config: d.Config, compilerCtx: d.CompilerCtx, buildCtx: d.BuildCtx, platform: string, inlineWorkers: boolean) => Plugin;
export declare const WORKER_HELPERS = "\nlet pendingIds = 0;\nlet callbackIds = 0;\nconst pending = new Map();\nconst callbacks = new Map();\n\nexport const createWorker = (workerPath, workerName, workerMsgId) => {\n  const worker = new Worker(workerPath, {name:workerName});\n\n  worker.addEventListener('message', ({data}) => {\n    if (data) {\n      const workerMsg = data[0];\n      const id = data[1];\n      const value = data[2];\n\n      if (workerMsg === workerMsgId) {\n        const err = data[3];\n        const [resolve, reject, callbackIds] = pending.get(id);\n        pending.delete(id);\n\n        if (err) {\n          reject(err);\n        } else {\n          if (callbackIds) {\n            callbackIds.forEach(id => callbacks.delete(id));\n          }\n          resolve(value);\n        }\n      } else if (workerMsg === workerMsgId + '.cb') {\n        try {\n          callbacks.get(id)(...value);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n  });\n\n  return worker;\n};\n\nexport const createWorkerProxy = (worker, workerMsgId, exportedMethod) => (\n  (...args) => new Promise((resolve, reject) => {\n    let pendingId = pendingIds++;\n    let i = 0;\n    let argLen = args.length;\n    let mainData = [resolve, reject];\n    pending.set(pendingId, mainData);\n\n    for (; i < argLen; i++) {\n      if (typeof args[i] === 'function') {\n        const callbackId = callbackIds++;\n        callbacks.set(callbackId, args[i]);\n        args[i] = [workerMsgId + '.cb', callbackId];\n        (mainData[2] = mainData[2] || []).push(callbackId);\n      }\n    }\n    const postMessage = (w) => (\n      w.postMessage(\n        [workerMsgId, pendingId, exportedMethod, args],\n        args.filter(a => a instanceof ArrayBuffer)\n      )\n    );\n    if (worker.then) {\n      worker.then(postMessage);\n    } else {\n      postMessage(worker);\n    }\n  })\n);\n";
