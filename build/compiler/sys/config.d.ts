import * as d from '../../declarations';
export declare const getConfig: (userConfig: d.Config) => {
    buildAppCore?: boolean;
    buildDocs?: boolean;
    configPath?: string;
    cwd?: string;
    writeLog?: boolean;
    devServer?: d.DevServerConfig;
    flags?: d.ConfigFlags;
    fsNamespace?: string;
    logLevel?: string;
    rootDir?: string;
    packageJsonFilePath?: string;
    sourceMap?: boolean;
    suppressLogs?: boolean;
    profile?: boolean;
    tsCompilerOptions?: any;
    _isValidated?: boolean;
    _isTesting?: boolean;
    allowInlineScripts?: boolean;
    autoprefixCss?: any;
    bundles?: d.ConfigBundle[];
    copy?: d.CopyTask[];
    enableCache?: boolean;
    excludeSrc?: string[];
    globalStyle?: string;
    hashedFileNameLength?: number;
    hashFileNames?: boolean;
    namespace?: string;
    outputTargets?: d.OutputTarget[];
    plugins?: any[];
    srcDir?: string;
    commonjs?: d.BundlingConfig;
    nodeResolve?: d.NodeResolveConfig;
    rollupConfig?: d.RollupConfig;
    buildEs5?: boolean;
    minifyJs?: boolean;
    minifyCss?: boolean;
    devMode?: boolean;
    logger?: d.Logger;
    extras?: d.ConfigExtras;
    hydratedFlag?: d.HydratedFlag;
    taskQueue?: "async" | "immediate" | "congestionAsync";
    globalScript?: string;
    srcIndexHtml?: string;
    watch?: boolean;
    testing?: d.TestingConfig;
    maxConcurrentWorkers?: number;
    preamble?: string;
    includeSrc?: string[];
    rollupPlugins?: {
        before?: any[];
        after?: any[];
    };
    entryComponentsHint?: string[];
    buildDist?: boolean;
    buildLogFilePath?: string;
    cacheDir?: string;
    devInspector?: boolean;
    enableCacheStats?: boolean;
    sys?: d.CompilerSystem;
    tsconfig?: string;
    validateTypes?: boolean;
    watchIgnoredRegex?: RegExp;
    excludeUnusedDependencies?: boolean;
    typescriptPath?: string;
    stencilCoreResolvedId?: string;
};
